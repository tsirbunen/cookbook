type Ingredient {
  id: Int!
  name: String!
  amount: Float
  unit: String
  previousId: Int
}

input IngredientInput {
  id: Int
  name: String!
  amount: Float
  unit: String
  groupId: Int
  previousId: Int
}

type IngredientGroup {
  id: Int!
  title: String
  ingredients: [Ingredient!]!
}

input IngredientGroupInput {
  id: Int
  title: String
  ingredients: [IngredientInput!]!
}

type Instruction {
  id: Int!
  content: String!
  previousId: Int
}

type InstructionGroup {
  id: Int!
  title: String
  instructions: [Instruction!]!
}

input InstructionInput {
  id: Int
  content: String!
  groupId: Int
  previousId: Int
}

input InstructionGroupInput {
  id: Int
  title: String
  instructions: [InstructionInput!]
}

type Photo {
  id: Int!
  url: String!
  isMainPhoto: Boolean!
}

input PhotoInput {
  url: String!
  isMainPhoto: Boolean!
}

type Tag {
  id: Int!
  tag: String!
}

type Language {
  id: Int!
  language: String!
}

type Recipe {
  id: Int!
  title: String!
  description: String
  photos: [Photo!]
  tags: [Tag!]
  ovenNeeded: Boolean!
  language: Language!
  isPrivate: Boolean
  authorId: Int
  ingredientGroups: [IngredientGroup!]!
  instructionGroups: [InstructionGroup!]!
}

input CreateRecipeInput {
  title: String!
  description: String
  photoFiles: [File!]
  photoIdentifiers: [String!]
  tags: [String!]
  language: String!
  ovenNeeded: Boolean!
  isPrivate: Boolean!
  authorId: Int!
  ingredientGroups: [IngredientGroupInput!]!
  instructionGroups: [InstructionGroupInput!]!
}

input PatchRecipeInput {
  title: String
  description: String
  photoFiles: [File!]
  photoIdentifiers: [String!]
  tags: [String!]
  language: String
  ovenNeeded: Boolean
  isPrivate: Boolean
  authorId: Int!
  ingredientGroups: [IngredientGroupInput!]
  instructionGroups: [InstructionGroupInput!]
}

union RecipeResult = Recipe | UnauthenticatedError | UnauthorizedError | BadInputError

directive @isAuthenticated on FIELD_DEFINITION

directive @isAuthor on FIELD_DEFINITION

directive @isValidInput on FIELD_DEFINITION

extend type Query {
  allRecipes: [Recipe!]!
  allLanguages: [Language!]!
  allTags: [Tag!]!
}

extend type Mutation {
  createRecipe(createRecipeInput: CreateRecipeInput!): RecipeResult @isAuthor @isValidInput
  patchRecipe(recipeId: Int!, recipePatch: PatchRecipeInput!): RecipeResult @isAuthor @isValidInput
}
