type Account {
  id: Int!
  uuid: String!
  username: String!
  phoneNumber: String!
  isVerified: Boolean!
  token: String
}

input AccountInput {
  username: String!
  phoneNumber: String!
}

union AccountResult = Account | BadInputError

input SignInInput {
  code: String!
  phoneNumber: String!
}

# Instead of throwing errors we return union types that can be either the expected entity
# or an "alternative result" (i.e. an anticipated error). This is because we want also the
# error replies to be properly typed so that the client has an easier job of guiding the
# user when something goes wrong.
extend type Mutation {
  createAccount(accountInput: AccountInput!): AccountResult!
  requestVerificationCode(phoneNumber: String!): GeneralResult!
  signInToAccount(signInInput: SignInInput!): AccountResult!
  deleteAccount(id: Int!, uuid: String!): GeneralResult!
}
