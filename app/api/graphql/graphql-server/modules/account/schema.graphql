enum IdentityProvider {
  EMAIL
  GITHUB
  FACEBOOK
}

type Account {
  id: Int!
  uuid: String!
  username: String!
  token: String
  email: String
  emailVerified: Boolean
  identityProvider: IdentityProvider!
}

input EmailAccountInput {
  username: String!
  email: String!
  password: String!
}

input EmailInput {
  email: String!
}

input DeleteAccountInput {
  id: Int!
  uuid: String!
}

union AccountResult = Account | BadInputError

input SignInToEmailAccountInput {
  email: String!
  password: String!
}

input NonEmailAccountInput {
  username: String!
  identityProvider: IdentityProvider!
  token: String!
}

# Instead of throwing errors we return union types that can be either the expected entity
# or an "alternative result" (i.e. an anticipated error). This is because we want also the
# error replies to be properly typed so that the client has an easier job of guiding the
# user when something goes wrong.
extend type Mutation {
  createEmailAccount(emailAccountInput: EmailAccountInput!): AccountResult! @isValidInput
  requestVerificationEmail(emailInput: EmailInput!): GeneralResult! @isValidInput
  signInToEmailAccount(signInToEmailAccountInput: SignInToEmailAccountInput!): AccountResult! @isValidInput
  createNonEmailAccount(nonEmailAccountInput: NonEmailAccountInput!): AccountResult! @isValidInput
  deleteAccount(deleteAccountInput: DeleteAccountInput!): GeneralResult! @isValidInput
}

extend type Query {
  getAccount(token: String!): AccountResult!
}
